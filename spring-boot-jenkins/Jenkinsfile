pipeline {
    agent any
    tools {
        maven 'maven3.9.0'
        jdk 'jdk17'
    }
    
    environment {
        // SonarQube configuration
        SCANNER_HOME = tool 'SonarQubeScanner'  // Make sure to configure this tool in Jenkins
        SONAR_HOST_URL = 'http://sonarqube:9000'  // Update with your SonarQube server URL
        // The token should be stored in Jenkins Credentials (use credentials ID)
        SONAR_AUTH_TOKEN = credentials('sonar-token')  // Store your SonarQube token in Jenkins credentials
    }
    
    stages {
        stage('Initialize') {
            steps {
                sh '''
                    echo "Build initialized..."
                    echo "PATH = ${PATH}"
                    echo "JAVA_HOME = ${JAVA_HOME}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
            }
        }

        stage('Build') {
            steps {
                dir('spring-boot-jenkins') {
                    sh 'mvn -DskipTests=true clean package' 
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {  // 'SonarQube' should match the name in Jenkins system config
                        sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=spring-boot-jenkins \
                            -Dsonar.projectName=spring-boot-jenkins \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=src \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.java.libraries=target/*.jar \
                            -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                            -Dsonar.junit.reportsPath=target/surefire-reports \
                            -Dsonar.jacoco.reportMissing.force.zero=true \
                            -Dsonar.sourceEncoding=UTF-8 \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_AUTH_TOKEN}
                        """
                    }
                }
            }
        }
        
        // Optional: Add a quality gate check
        // stage('Quality Gate Check') {
        //     steps {
        //         timeout(time: 1, unit: 'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
        stage('Test') {
            steps {
                dir('spring-boot-jenkins') {
                    sh 'mvn clean test'
                }
            }
            post {
                always {
                    junit 'spring-boot-jenkins/target/surefire-reports/**/*.xml'
                }
            }
        }
        
        stage('Code Coverage') {
            steps {
                dir('spring-boot-jenkins') {
                    // This will generate the JaCoCo report
                    sh 'mvn verify'
                    
                    // Publish JaCoCo coverage report
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java',
                        exclusionPattern: '**/target/generated-sources/**,**/test/**',
                        skipCopyOfSrcFiles: false
                    )
                }
            }
        }

        // Uncomment when ready to deploy
        // stage('Deploy') {
        //     steps {
        //         sh 'echo "Deploy to Server....DONE"'
        //     }
        // }
    }
}
